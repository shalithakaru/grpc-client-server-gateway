// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Unary RPC
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// Client streaming RPC
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_ClientStreamClient, error)
	// Server streaming RPC
	ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (ChatService_ServerStreamClient, error)
	// Bidirectional streaming RPC
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_BidirectionalStreamClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chat.ChatService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceClientStreamClient{stream}
	return x, nil
}

type ChatService_ClientStreamClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type chatServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceClientStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceClientStreamClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (ChatService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], "/chat.ChatService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ServerStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceServerStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], "/chat.ChatService/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceBidirectionalStreamClient{stream}
	return x, nil
}

type ChatService_BidirectionalStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceBidirectionalStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceBidirectionalStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// Unary RPC
	SayHello(context.Context, *Message) (*Message, error)
	// Client streaming RPC
	ClientStream(ChatService_ClientStreamServer) error
	// Server streaming RPC
	ServerStream(*Message, ChatService_ServerStreamServer) error
	// Bidirectional streaming RPC
	BidirectionalStream(ChatService_BidirectionalStreamServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) SayHello(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedChatServiceServer) ClientStream(ChatService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedChatServiceServer) ServerStream(*Message, ChatService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedChatServiceServer) BidirectionalStream(ChatService_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ClientStream(&chatServiceClientStreamServer{stream})
}

type ChatService_ClientStreamServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceClientStreamServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceClientStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ServerStream(m, &chatServiceServerStreamServer{stream})
}

type ChatService_ServerStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceServerStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).BidirectionalStream(&chatServiceBidirectionalStreamServer{stream})
}

type ChatService_BidirectionalStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatServiceBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceBidirectionalStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceBidirectionalStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ChatService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _ChatService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _ChatService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _ChatService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

// ChatServiceTwoClient is the client API for ChatServiceTwo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceTwoClient interface {
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type chatServiceTwoClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceTwoClient(cc grpc.ClientConnInterface) ChatServiceTwoClient {
	return &chatServiceTwoClient{cc}
}

func (c *chatServiceTwoClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatServiceTwo/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceTwoServer is the server API for ChatServiceTwo service.
// All implementations must embed UnimplementedChatServiceTwoServer
// for forward compatibility
type ChatServiceTwoServer interface {
	SayHello(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedChatServiceTwoServer()
}

// UnimplementedChatServiceTwoServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceTwoServer struct {
}

func (UnimplementedChatServiceTwoServer) SayHello(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedChatServiceTwoServer) mustEmbedUnimplementedChatServiceTwoServer() {}

// UnsafeChatServiceTwoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceTwoServer will
// result in compilation errors.
type UnsafeChatServiceTwoServer interface {
	mustEmbedUnimplementedChatServiceTwoServer()
}

func RegisterChatServiceTwoServer(s grpc.ServiceRegistrar, srv ChatServiceTwoServer) {
	s.RegisterService(&ChatServiceTwo_ServiceDesc, srv)
}

func _ChatServiceTwo_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceTwoServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatServiceTwo/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceTwoServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatServiceTwo_ServiceDesc is the grpc.ServiceDesc for ChatServiceTwo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatServiceTwo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatServiceTwo",
	HandlerType: (*ChatServiceTwoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ChatServiceTwo_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
