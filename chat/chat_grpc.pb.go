// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Unary RPC
	UnaryChat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// Client streaming RPC
	ClientStreamChat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ClientStreamChatClient, error)
	// Server streaming RPC
	ServerStreamChat(ctx context.Context, in *Message, opts ...grpc.CallOption) (ChatService_ServerStreamChatClient, error)
	// Bidirectional streaming RPC
	BidirectionalStreamChat(ctx context.Context, opts ...grpc.CallOption) (ChatService_BidirectionalStreamChatClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) UnaryChat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/UnaryChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ClientStreamChat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ClientStreamChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chat.ChatService/ClientStreamChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceClientStreamChatClient{stream}
	return x, nil
}

type ChatService_ClientStreamChatClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type chatServiceClientStreamChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceClientStreamChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceClientStreamChatClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) ServerStreamChat(ctx context.Context, in *Message, opts ...grpc.CallOption) (ChatService_ServerStreamChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], "/chat.ChatService/ServerStreamChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceServerStreamChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ServerStreamChatClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceServerStreamChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceServerStreamChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) BidirectionalStreamChat(ctx context.Context, opts ...grpc.CallOption) (ChatService_BidirectionalStreamChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], "/chat.ChatService/BidirectionalStreamChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceBidirectionalStreamChatClient{stream}
	return x, nil
}

type ChatService_BidirectionalStreamChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceBidirectionalStreamChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceBidirectionalStreamChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceBidirectionalStreamChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// Unary RPC
	UnaryChat(context.Context, *Message) (*Message, error)
	// Client streaming RPC
	ClientStreamChat(ChatService_ClientStreamChatServer) error
	// Server streaming RPC
	ServerStreamChat(*Message, ChatService_ServerStreamChatServer) error
	// Bidirectional streaming RPC
	BidirectionalStreamChat(ChatService_BidirectionalStreamChatServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) UnaryChat(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryChat not implemented")
}
func (UnimplementedChatServiceServer) ClientStreamChat(ChatService_ClientStreamChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamChat not implemented")
}
func (UnimplementedChatServiceServer) ServerStreamChat(*Message, ChatService_ServerStreamChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamChat not implemented")
}
func (UnimplementedChatServiceServer) BidirectionalStreamChat(ChatService_BidirectionalStreamChatServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamChat not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_UnaryChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UnaryChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/UnaryChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UnaryChat(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ClientStreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ClientStreamChat(&chatServiceClientStreamChatServer{stream})
}

type ChatService_ClientStreamChatServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatServiceClientStreamChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceClientStreamChatServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceClientStreamChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_ServerStreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ServerStreamChat(m, &chatServiceServerStreamChatServer{stream})
}

type ChatService_ServerStreamChatServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatServiceServerStreamChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceServerStreamChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_BidirectionalStreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).BidirectionalStreamChat(&chatServiceBidirectionalStreamChatServer{stream})
}

type ChatService_BidirectionalStreamChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatServiceBidirectionalStreamChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceBidirectionalStreamChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceBidirectionalStreamChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryChat",
			Handler:    _ChatService_UnaryChat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamChat",
			Handler:       _ChatService_ClientStreamChat_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamChat",
			Handler:       _ChatService_ServerStreamChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamChat",
			Handler:       _ChatService_BidirectionalStreamChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

// CallServiceClient is the client API for CallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallServiceClient interface {
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type callServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallServiceClient(cc grpc.ClientConnInterface) CallServiceClient {
	return &callServiceClient{cc}
}

func (c *callServiceClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.CallService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallServiceServer is the server API for CallService service.
// All implementations must embed UnimplementedCallServiceServer
// for forward compatibility
type CallServiceServer interface {
	SayHello(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedCallServiceServer()
}

// UnimplementedCallServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCallServiceServer struct {
}

func (UnimplementedCallServiceServer) SayHello(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedCallServiceServer) mustEmbedUnimplementedCallServiceServer() {}

// UnsafeCallServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallServiceServer will
// result in compilation errors.
type UnsafeCallServiceServer interface {
	mustEmbedUnimplementedCallServiceServer()
}

func RegisterCallServiceServer(s grpc.ServiceRegistrar, srv CallServiceServer) {
	s.RegisterService(&CallService_ServiceDesc, srv)
}

func _CallService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.CallService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallServiceServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// CallService_ServiceDesc is the grpc.ServiceDesc for CallService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.CallService",
	HandlerType: (*CallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _CallService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
